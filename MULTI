/// app/layout.tsx
import type React from "react"
import type { Metadata } from "next"
import "./globals.css"
import { ThemeProvider } from "@/components/theme-provider"

export const metadata: Metadata = {
title: "Portafolio",
description: "Portafolio minimalista monocromo",
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
return (
<html lang="es" suppressHydrationWarning className="dark">
  <body className="bg-gray-100 text-gray-700 dark:bg-[#000000] dark:text-[#cccccc] antialiased">
    <ThemeProvider attribute="class" defaultTheme="dark" enableSystem={false}>
      {children}
    </ThemeProvider>
  </body>
</html>
)
}

// components/theme-provider.tsx
"use client"

import type * as React from "react"
import { ThemeProvider as NextThemesProvider, type ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: { children: React.ReactNode } & ThemeProviderProps) {
return (
<NextThemesProvider
  attribute="class"
  defaultTheme="dark"
  enableSystem={false}
  storageKey="portfolio-theme"
  disableTransitionOnChange={false}
  {...props}
>
  {children}
</NextThemesProvider>
)
}

// components/theme-toggle.tsx
"use client"

import { useEffect, useState } from "react"
import { Moon, Sun } from 'lucide-react'
import { useTheme } from "next-themes"

export default function ThemeToggle() {
const { resolvedTheme, setTheme } = useTheme()
const [mounted, setMounted] = useState(false)
useEffect(() => setMounted(true), [])

const root = typeof document !== "undefined" ? document.documentElement : null
const isDark = mounted ? root?.classList.contains("dark") ?? (resolvedTheme === "dark") : true

function toggleTheme() {
if (!root) return
// TransiciÃ³n global suave
root.classList.add("theme-transition")
window.setTimeout(() => root.classList.remove("theme-transition"), 450)

const next = isDark ? "light" : "dark"
// 1) Aplica inmediatamente la clase en <html>
if (next === "dark") root.classList.add("dark")
else root.classList.remove("dark")
// 2) Persiste con next-themes
setTheme(next)
}

return (
<button
  type="button"
  onClick={toggleTheme}
  className="inline-flex h-9 w-9 items-center justify-center rounded border border-gray-300 text-xs hover:bg-gray-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 dark:border-[#4d4d4d] dark:hover:bg-[#1a1a1a] dark:focus-visible:ring-[#4d4d4d]"
  aria-label="Cambiar tema"
  title="Cambiar tema"
>
  {mounted ? (isDark ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />) : <Sun className="h-4 w-4" />}
</button>
)
}

// app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

html { scroll-behavior: smooth; }

.theme-transition *,
.theme-transition *::before,
.theme-transition *::after {
transition: background-color 400ms ease, color 400ms ease, border-color 400ms ease, fill 400ms ease,
  stroke 400ms ease, opacity 300ms ease, transform 300ms ease !important;
}

@keyframes fade-up {
from { opacity: 0; transform: translateY(10px); }
to { opacity: 1; transform: translateY(0); }
}
.reveal { opacity: 0; animation: fade-up 600ms cubic-bezier(0.22, 1, 0.36, 1) forwards; }
